<!-- Adding the routing to Image Attributes page -->

@page "/attributes"
@using System.Text.Json;
@using System.Net.Mime;
@using System.Text;

<h3>Upload image that you want to analyze</h3>
<label>Image URL:</label>


<!-- binding the input to the image url property 
button on click calls the method to process the image -->
<input @bind= "ImageUrl" />

<br />
<br />
<button @onclick="@ProcessImage">Analyze</button>
<br />
<br />

<!-- displays the attribute result for the user  -->

@if (_faces != null)
{
    @foreach (var face in _faces)
    {
        <div class="row">
            <div class="col-md-8">
                <h2>Analyzing...</h2>
                <div style="float: left;">
                    <img src="@ImageUrl" height="200" width="200" />
                </div>
                <div style="margin-left: 30px; float: right;">
                    <ul>
                        <li><strong>Image ID:</strong> @face.FaceId</li>
                        <li><strong>Emotion:</strong> @face.TopEmotion</li>
                        <li><strong>Age:</strong> @face.FaceAttributes.Age</li>
                        <li><strong>Glasses:</strong> @face.FaceAttributes.Glasses</li>
                        <li><strong>Gender: </strong>@face.FaceAttributes.Gender</li>
                        
                    </ul>
                </div>
            </div>
        </div>
    }
}

@code {

    private readonly string _baseUrl = "https://analyzemyface.cognitiveservices.azure.com/";         //url endpoint in your azure face api account 
    private string ImageUrl { get; set; }
    private Face[] _tmpfaces;
    private List<Face> _faces;                                                                     //list of faces


    //API Key injection
    [Inject]
    private AppConfiguration _config { get; set; }

    //event handler 
    private async Task ProcessImage()
    {
        _faces = null;
        _faces = new List<Face>();                  //temp list of faces 

        //create http client request 
        HttpClient client = new HttpClient { BaseAddress = new Uri(_baseUrl + "/face/v1.0/detect?returnFaceAttributes=age,glasses,emotion,gender&ReturnFaceLandmarks=true") };
        HttpResponseMessage response = null;

        //input image url 
        var payload = new DataPayLoad { Url = ImageUrl };

        //object to string conversion //adds the headers to the api call
        var payloadString = new StringContent(System.Text.Json.JsonSerializer.Serialize(payload), Encoding.UTF8, MediaTypeNames.Application.Json);       

        //azure subscription key as local secret that is added to the header
        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", _config.ApiKey);

        //sending the request as json
        response = await client.PostAsync(client.BaseAddress, payloadString);


        //returning content as json and deserialize it to tempfaces 
        if (response.Content is object && response.Content.Headers.ContentType.MediaType == "application/json")
        {
            var content = await response.Content.ReadAsStringAsync();
            _tmpfaces = JsonSerializer.Deserialize<Face[]>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });


            ProcessEmotions();

        }

    }

    //method that picks the highest emotion in result
    public void ProcessEmotions()
    {
        foreach (Face face in _tmpfaces)
        {
            //dictionary to store the names and values of the emotions 
            var emotionValues = new Dictionary<string, float> 
            {
                {"Anger", face.FaceAttributes.Emotion.Anger},
                {"Contempt", face.FaceAttributes.Emotion.Contempt},
                {"Disgust", face.FaceAttributes.Emotion.Disgust},
                {"Fear", face.FaceAttributes.Emotion.Fear},
                {"Happiness", face.FaceAttributes.Emotion.Happiness},
                {"Neutral", face.FaceAttributes.Emotion.Neutral},
                {"Sadness", face.FaceAttributes.Emotion.Sadness},
                {"Surprise", face.FaceAttributes.Emotion.Surprise},

            };

            float topValue = 0;
            string topValueName = "";

            foreach (var emotion in emotionValues)
            {
                Console.WriteLine("Key: " + emotion.Key + "Value: " + emotion.Value);

                if (emotion.Value > topValue)
                {
                    topValue = emotion.Value;
                    topValueName = emotion.Key;
                }
            }
            //displaying highest rating from emotion 
            // face object and adding it to the face collection 
            Face ourFace = new Face { FaceId = face.FaceId, FaceAttributes = face.FaceAttributes, TopEmotion = topValueName };
            _faces.Add(ourFace);
        }
    }

    public class DataPayLoad
    {

        public string Url  { get; set; }

    }

    //face attribute class that returns data from azure 
    //creating an class objects based on the json data from postman
    public class FaceAttribute
    {
        public Emotion Emotion { get; set; }
        public float Age { get; set; }
        public string Glasses { get; set; }
        public string Gender { get; set; }
    }

    //highest rated emotion based on azure api results
    public class Emotion
    {
        public float Anger { get; set; }
        public float Contempt { get; set; }
        public float Disgust { get; set; }
        public float Fear { get; set; }
        public float Happiness { get; set; }
        public float Neutral { get; set; }
        public float Sadness { get; set; }
        public float Surprise { get; set; }
    }

    //highest rated emotion based on azure api results
    public class FacialHair
    {
        public float Moustache { get; set; }
        public float Beard { get; set; }
        public float Sideburns { get; set; }

    }

    public class Face
    {
        public Guid FaceId { get; set; }
        public FaceAttribute FaceAttributes { get; set; }
        public string TopEmotion { get; set; }
    }

  }